import java.util.Properties

plugins {
    id("com.android.library")
    id("org.jetbrains.kotlin.android")
    id("com.google.devtools.ksp")
    id("org.jetbrains.kotlin.plugin.parcelize")
    id("app.cash.sqldelight")
}

android {
    namespace = "com.zj.csastest.core"
    compileSdk = libs.versions.compileSdk.get().toInt()


    defaultConfig {
        minSdk = libs.versions.minSdk.get().toInt()
        testInstrumentationRunner = "androidx.test.runner.AndroidJUnitRunner"

        // this slows down the attacker, but its still visible => use API PROXY instead on backend side
        // we can add local.properties to .gitignore so keys are only locally accessible => i wont do it for this sample so its accessible for you => i hope it wont be re-autogenerated on your machine
        val localProperties = Properties()
        val localPropertiesFile = rootProject.file("local.properties")
        if (localPropertiesFile.exists()) {
            localProperties.load(localPropertiesFile.inputStream())
        }

        buildConfigField("String", "API_KEY", "\"${localProperties["API_KEY"]}\"")
        buildConfigField("String", "CSAS_SANDBOX_API", "\"${localProperties["CSAS_SANDBOX_API"]}\"")
        buildConfigField("String", "CSAS_PROD_API", "\"${localProperties["CSAS_PROD_API"]}\"")
    }

    buildFeatures {
        buildConfig = true
    }

    compileOptions {
        sourceCompatibility = JavaVersion.VERSION_17
        targetCompatibility = JavaVersion.VERSION_17
    }
}

dependencies {

    implementation (libs.threetenAbp)

    implementation (libs.appCompat)
    implementation (libs.recyclerView)
    implementation (libs.materialDesign)
    implementation (libs.swipeRefreshLayout)

    implementation (libs.daggerRuntime)
    ksp (libs.daggerCompiler)

    implementation (libs.rxJava)
    implementation (libs.rxAndroid)
    implementation (libs.rxKotlin)
    implementation (libs.rxRelay)

    implementation (libs.okhttpClient)
    implementation (libs.okhttpLoggingInterceptor)
    implementation (libs.retrofitClient)
    implementation (libs.retrofitRxjavaAdapter)
    implementation (libs.retrofitMoshiConverter)

    implementation (libs.moshiClient)
    ksp (libs.moshiCompiler)

    implementation (libs.sqlDelightDriver)
    implementation (libs.sqlDelightRxJava)

    implementation (libs.conductorRuntime)

    testImplementation (libs.sqlDelightJdbcDriver)
//    testImplementation deps.test.mockitoCore
//    testImplementation deps.test.mockitoKotlin
    testImplementation (libs.testJunit)
//    testImplementation 'org.mockito:mockito-inline:2.13.0'
//    testImplementation 'io.mockk:mockk:1.12.0'
}

sqldelight {
    databases {
        create("Database") {
            packageName = "com.zj.csastest.core"
            sourceFolders = listOf("sqldelight")
        }
    }
}